package wiki

import (
	"fmt"
	"time"
	"strings"
	"net/http"
	"io/ioutil"
	"encoding/json"
)

type WikiPage struct {
	Batchcomplete bool `json:"batchcomplete"`
	Query         struct {
		Pages map[string] struct {
			Pageid  int    `json:"pageid"`
			Ns      int    `json:"ns"`
			Title   string `json:"title"`
			Extract string `json:"extract"`
		} `json:"pages"`
	} `json:"query"`
}

// type AutoGenerated struct {
// 	Batchcomplete string `json:"batchcomplete"`
// 	Query         struct {
// 		Pages struct {
// 			Num8586 struct {
// 				Pageid  int    `json:"pageid"`
// 				Ns      int    `json:"ns"`
// 				Title   string `json:"title"`
// 				Extract string `json:"extract"`
// 			} `json:"8586"`
// 		} `json:"pages"`
// 	} `json:"query"`
// }

type WikiSearch struct {
	Batchcomplete string `json:"batchcomplete"`
	Continue      struct {
		Sroffset int    `json:"sroffset"`
		Continue string `json:"continue"`
	} `json:"continue"`
	Query struct {
		Searchinfo struct {
			Totalhits int `json:"totalhits"`
		} `json:"searchinfo"`
		Search []struct {
			Ns        int       `json:"ns"`
			Title     string    `json:"title"`
			Pageid    int       `json:"pageid"`
			Size      int       `json:"size"`
			Wordcount int       `json:"wordcount"`
			Snippet   string    `json:"snippet"`
			Timestamp time.Time `json:"timestamp"`
		} `json:"search"`
	} `json:"query"`
}


const url = "https://en.wikipedia.org/w/api.php"
const page_url = "https://en.wikipedia.org/wiki/"

func Search(search string) (string, error) {
	wikiSearch := WikiSearch{}

	req, err := http.NewRequest("GET", url, nil)

	q := req.URL.Query()
	q.Add("action", "query");
	q.Add("format", "json");
	q.Add("list", "search");
	q.Add("utf8", "1");
	q.Add("srsearch", search);
	req.URL.RawQuery = q.Encode()

	if err != nil {
		return "", err
	}

	res, err := http.DefaultClient.Do(req)

	body, _ := ioutil.ReadAll(res.Body)

	json.Unmarshal([]byte(body), &wikiSearch)

	if (len(wikiSearch.Query.Search) > 1) {
		pageId := fmt.Sprintf("%d", wikiSearch.Query.Search[0].Pageid)

		wikiPage := WikiPage{}

		req, err := http.NewRequest("GET", url, nil)

		if err != nil {
			return "", err
		}
		q := req.URL.Query()
		q.Add("format", "json")
		q.Add("action", "query")
		q.Add("prop", "extracts")
		q.Add("exintro", "1")
		q.Add("explaintext", "1")
		q.Add("redirects", "1")
		q.Add("exsentences", "10")
		q.Add("pageids", pageId)
		q.Add("formatversion", "1")
		req.URL.RawQuery = q.Encode()

		res, err := http.DefaultClient.Do(req)

		if err != nil {
			return "", err
		}

		b, _ := ioutil.ReadAll(res.Body)

		json.Unmarshal([]byte(b), &wikiPage)

		title := strings.Replace(wikiPage.Query.Pages[pageId].Title, " ", "_", -1)

		result_url := page_url + title

		extract := result_url + " - " + wikiPage.Query.Pages[pageId].Extract

		return extract, nil
	}

	return "", nil
}
